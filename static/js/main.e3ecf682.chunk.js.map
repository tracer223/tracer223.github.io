{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["soundBankOne","keyCode","keyTrigger","id","url","DrumPad","handleKeyDown","e","_this","props","charCodeAt","audio","play","currentTime","handleDisplay","handleClick","document","addEventListener","this","removeEventListener","_this2","react_default","a","createElement","className","onClick","ref","src","React","Component","App","_this3","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","adjustVolume","setState","volumeLevel","target","value","display","bind","assertThisInitialized","state","_this4","map","s","App_DrumPad","ReactDOM","render","App_App","getElementById","Boolean","window","location","hostname","match","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3ecf682.chunk.js","sourcesContent":["import React, {\n  Component\n} from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n\n\nconst soundBankOne = [{\n  keyCode: 81,\n  keyTrigger: 'Q',\n  id: 'Heater-1',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n}, {\n  keyCode: 87,\n  keyTrigger: 'W',\n  id: 'Heater-2',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n}, {\n  keyCode: 69,\n  keyTrigger: 'E',\n  id: 'Heater-3',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n}, {\n  keyCode: 65,\n  keyTrigger: 'A',\n  id: 'Heater-4',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n}, {\n  keyCode: 83,\n  keyTrigger: 'S',\n  id: 'Clap',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n}, {\n  keyCode: 68,\n  keyTrigger: 'D',\n  id: 'Open-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n}, {\n  keyCode: 90,\n  keyTrigger: 'Z',\n  id: \"Kick-n'-Hat\",\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n}, {\n  keyCode: 88,\n  keyTrigger: 'X',\n  id: 'Kick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n}, {\n  keyCode: 67,\n  keyTrigger: 'C',\n  id: 'Closed-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n}, ];\n\nclass DrumPad extends React.Component {\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown)\n    //window.focus()\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown)\n  }\n\n  handleKeyDown = e => {\n    if (e.keyCode === this.props.keyTrigger.charCodeAt()) {\n      this.audio.play()\n      this.audio.currentTime = 0\n      this.props.handleDisplay(this.props.id)\n    }\n  }\n\n  handleClick = () => {\n    this.audio.play()\n    this.audio.currentTime = 0\n    this.props.handleDisplay(this.props.id)\n  }\n\n  render() {\n    return ( <\n      div id = \"board\" >\n      <\n      div className = \"drum-pad\"\n      id = {\n        this.props.id\n      }\n      onClick = {\n        this.handleClick\n      } >\n      <\n      p > {\n        this.props.keyTrigger\n      } < /p> <\n      audio className = \"clip\"\n      ref = {\n        ref => this.audio = ref\n      }\n      src = {\n        this.props.url\n      }\n      id = {\n        this.props.keyTrigger\n      }\n      /> < /\n      div > <\n      /div>\n    );\n  }\n}\n\nclass Controls extends React.Component {\n\n  render() {\n    return ( <\n      div id = \"controls\" >\n      <\n      div >\n      <\n      h2 > Volume < /h2> <\n      input type = \"range\"\n      min = \"0\"\n      max = \"1\"\n      step = \"0.01\" / >\n      <\n      /div> < /\n      div >\n    );\n  }\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.adjustVolume = this.adjustVolume.bind(this);\n    this.state = {\n      display: 'Click or Press Key',\n      volumeLevel: 0.4\n    }\n  }\n\n  adjustVolume = e => {\n    this.setState({\n      volumeLevel: e.target.value\n    });\n  }\n\n  handleDisplay = display => this.setState({\n    display\n  })\n\n  render() {\n    return ( < div id = \"drum-machine\" >\n      <\n      div id = \"display\" > {\n        this.state.display\n      } < /div> <\n      div id = \"drum-pads\" > {\n        soundBankOne.map(s => ( <\n          DrumPad id = {\n            s.id\n          }\n          keyTrigger = {\n            s.keyTrigger\n          }\n          url = {\n            s.url\n          }\n          handleDisplay = {\n            this.handleDisplay\n          }\n          />\n        ))\n      } < /div> <\n      footer > Â©Josh Henderson 2019 < /footer> <\n      /div>\n    );\n  }\n}\n\nReactDOM.render( < App / > , document.getElementById(\"root\"));\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}